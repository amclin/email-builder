<?xml version="1.0" encoding="UTF-8"?>

<project default="compile">
	<!-- Set the evironment for output -->
	<!-- allowed values are "dev" and "prod" -->
	<!-- Choosing "prod" will output compressed CSS without comments -->
	<property name="env" value="dev" />
	<property name="dir.source" value="${basedir}/src" />
	<property name="dir.output" value="${basedir}/build" />
	<property name="dir.intermediate" value="${basedir}/intermediate" />
	<property name="dir.config" value="${basedir}/conf" />
	<property name="dir.css" value="css"/>
	<!-- set the version control system in use -->
	<!-- allowed values are "hg", "git", "svn" -->
	<property name="source.control" value="git" />
	
	<target name="clean"
		description="Cleanup tool and build artifacts">
		<echo>Delete temporary directories.</echo>
		<delete dir="${dir.intermediate}" />
		<delete dir="${dir.output}" />
		<delete dir="${dir.config}/.sass-cache/" />
		<delete dir="${dir.source}/css" includes="*.css" />
	</target>
	
	<target name="prepare"
		depends="clean"
		description="Prepare for compile">
		<echo>Copy files from ${dir.source} to ${dir.intermediate}</echo>
		<copy todir="${dir.intermediate}" includeEmptyDirs="true">
			<fileset dir="${dir.source}/" excludes="${file.default.exclude}, ${file.exclude}"/>
		</copy>
		<mkdir dir="${dir.output}"/>
	</target>	
	
	<target name="compass_compile"
		description="Compile SCSS to CSS using Compass Ruby Gem">
		<condition property="cssEnv" value="production" else="development">
			<!-- Pass environment property to Compass compiler -->
			<equals arg1="${env}" arg2="prod" />
		</condition>
		<echo message="Compiling SCSS to CSS"/>
		<exec executable="compass" failonerror="yes" dir="${dir.config}">
			<arg value="compile"/>
			<arg value="--boring"/>
			<arg value="--force"/>
			<arg value="-e"/>
			<arg value="${cssEnv}"/>
			<arg value="-c" />
			<arg value="${dir.config}/config.rb"/>
		</exec>
		<copy todir="${dir.intermediate}/${dir.css}" includeEmptyDirs="false">
			<fileset dir="${dir.source}/${dir.css}" excludes="${file.default.exclude}, ${file.exclude}"/>
		</copy>
	</target>
	
	<target name="premailer"
		description="Convert Head and @include CSS into inline CSS using premailer">
		<echo>Inlining CSS for HTML files in ${src_dir}</echo>
		<apply executable="${basedir}/premailer-exec.sh" failonerror="yes" 
			dir="${src_dir}"
			dest="${dest_dir}">
			<srcfile />
			<targetfile />
			<fileset dir="${src_dir}" includes="*.html"/>
			<mapper type="glob" from="*.html" to="*.html"/>
		</apply>
	</target>

	<target name="css_exclude_head"
		description="Rip the CSS includes out that need to remain in the head to prevent them from being inlined.">
		<echo>Removing the @include that points to the head-specific CSS file</echo>
		<replaceregexp
			match='@import\ url\("css/head.css"\);'
			replace=""
			flags="gs">
			<fileset dir="${edit_dir}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>
	</target>

	<target name="css_insert_inline"
		description="Insert the CSS includes that should be inlined">
		<property name="file.name" value="inline.css"/>
		<echo>Copying ${file.name} into HTML head for files in ${edit_dir}</echo>
		<!-- load the CSS file contents into a variable -->
		<loadfile property="file.contents" srcFile="${css_dir}/${file.name}"/>
		<replaceregexp
			match="${match}"
			replace="${file.contents}"
			flags="gs">
			<fileset dir="${edit_dir}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>
	</target>

	<target name="css_insert_head"
		description="Insert the CSS includes that should remain in the head">
		<property name="file.name" value="head.css"/>
		<echo>Copying ${file.name} into HTML head</echo>
		<!-- load the CSS file contents into a variable -->
		<loadfile property="file.contents" srcFile="${css_dir}/${file.name}"/>
		<replaceregexp
			match='&lt;/head&gt;'
			replace="&lt;style\ type='text/css'&gt;${file.contents}&lt;/style&gt;&lt;/head&gt;"
			flags="gs">
			<fileset dir="${edit_dir}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>
	</target>

	<target name="css_include"
		depends="compass_compile">
		<antcall target="css_exclude_head">
			<param name="edit_dir" value="${dir.intermediate}"/>
		</antcall>
		<antcall target="css_insert_inline">
			<param name="edit_dir" value="${dir.intermediate}"/>
			<param name="css_dir" value="${dir.intermediate}/${dir.css}"/>
			<param name="match" value='@import\ url\("css/inline.css"\);'/>
		</antcall>
		<antcall target="premailer">
			<param name="src_dir" value="${dir.intermediate}"/>
			<param name="dest_dir" value="${dir.output}"/>
		</antcall>
		<antcall target="css_insert_head">
			<param name="edit_dir" value="${dir.output}"/>
			<param name="css_dir" value="${dir.source}/${dir.css}"/>
		</antcall>
	</target>
	
	<!-- Fires off the whole shebang -->
   	<target name="compile"
   		depends="prepare,build.revision.hg,build.revision.git,build.revision.svn"
   		description="Compile CSS and HTML">
   		<antcall target="css_include" />

   		<!-- Insert cache-busting string to work around Gmail image cacheing -->
   		<antcall target="bustcache">
			<param name="src" value="${dir.output}"/>
			<param name="cachebust" value="${version.id}"/>
		</antcall>
   		
   		<!-- copy assets from source to final -->
		<copy todir="${dir.output}/assets" includeEmptyDirs="true">
			<fileset dir="${dir.source}/assets" excludes="${file.default.exclude}, ${file.exclude}"/>
		</copy>
   		<delete dir="${dir.intermediate}" />
   	</target>

	<target name="bustcache"
   		description="Add cache-busting query string to image paths in html files">
   		<echo>Appending cache-busting string ${cachebust} to files in ${src}</echo>
   		<replaceregexp
   			match="\.(jpg|jpeg|png|gif)"
   			replace="\.\1\?v${cachebust}"
   			flags="gis">
   			<fileset dir="${src}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>
	</target>

	<target name="test.build.system"
		description="Choose which source control system is in use.">
		<echo>Matching source control setting. Set to ${source.control}</echo>
		<condition property="build.system.git">
			<matches pattern="git" string="${source.control}" />
		</condition>
		<condition property="build.system.hg">
			<matches pattern="hg" string="${source.control}" />
		</condition>
		<condition property="build.system.svn">
			<matches pattern="svn" string="${source.control}" />
		</condition>
	</target>

	<target name="build.revision.hg"
		description="Find the Mercurial revision number"
		if="build.system.hg"
		depends="test.build.system">
   		<exec executable="/usr/local/bin/hg" outputproperty="version.id">
   			<arg value="id"/>
   			<arg value="-i"/>
   		</exec>
   		<echo>Current Hg revision is ${version.id}</echo>
   	</target>

   	<target name="build.revision.git"
		description="Find the Git revision number"
		if="build.system.git"
		depends="test.build.system">
   		<exec executable="/usr/bin/git" outputproperty="version.id">
   			<arg value="rev-parse"/>
   			<arg value="--short"/>
   			<arg value="head"/>
   		</exec>
   		<echo>Current Git revision is ${version.id}</echo>
   	</target>

   	<target name="build.revision.svn"
		description="Find the SVN revision number"
		if="build.system.svn"
		depends="test.build.system">
   		<exec executable="/usr/bin/svnversion" outputproperty="version.id" />
   		<echo>Current SVN revision is ${version.id}</echo>
   	</target>
</project>